to do
 	Can Quot  $431.64 USA
canadian quotations

RULES, every page should have an error example

file:///C:/Users/16043/Desktop/_js/proxy/parcel/samples/14-flash-checks.html


TYPE OUTPUTS ?????

actor se7en




PAGE DISCUSSING THE DATA TYPES USED IN THE EXAMPLES ....
00-example-data.html





21-one-of-extras,   job is the extra   


09-type-extra
royalty is added to show


elizabeth I  first/     birth/queen      NO FIRST              /royal(EX) 
             Ms. 
alan turing  first/last/birth/crypto
             Mx.                        / degree(EX)   

Kevin Spacey first/last/birth          NO JOB        July 26, 1959	
						 Mr.

//////////////////////

Socrates     name/year                  -470BC
						 Mr.                        / degree(EX)
Boudica      name/year(MT)                             /royal(EX) 
						 Mrs. 

show: job(MT) for socrates and Boudica


///////////////////////////////////////////
last, job, and salutation can be empty(mt)
royalty and degree are extras(ex)

start
1 - first,last(MT),birth,job(MT)

3 - first,last(MT),birth,job(MT)
    salutation(MT)

7 - first,last(MT),birth,job(MT)
    salutation(MT)

8 - first,last(MT),birth,job(MT)
    BRING BACK SHOW() AS CAN BE EMPTY - salutation(MT)

9/10/11 first,last(MT),birth,job(MT),royalty(EX)
    salutation(MT),degree(EX)



16/17 first,last(MT),birth,job(MT)
      name,year                         boudica space-baby


21   first,last(MT),birth,job(MT),royalty(EX)
      name,year 

 		salutation(MT),degree(EX)























NOT IN THE CONTEXT OF poeple, too much info just
18-array-single ==> each person has an array of lucky_numbers
[lucky_numbers]


[ [people] {people} new_people]
19-array-multi ==> we have array people, object_people, and class_people







have a page with every type, and check them. Also every empty value    NaN==empty!!
consider _isEmpty(a_variable)  to be public, and also start an empty page with this single procedure

what about _aTypeOf() being the TypeIntro then build it up to typeVerify()?
a bunch of TypeOf() being equivalent to a TypeVerify()


  // if functions then person is array
  // if class then person is a class
  // if closure then person is an map          let {name, year, hair} = person
  // show array/object/class                class return `${this.name}, ${this.year}  Salutation   Mx.   Mr   Ms Sir Madam
  // need a parameter to check

PERSON vs Person person
100-value-validate.html       
	createPerson(name, birth, hair)   string date stringm
	name.length>0, birth>1888, hair in black, brown, red, blond [no hair OK]
create Person needs A showPerson() TO BE IN SYNC BELOW


then exactly the same, 200closure, and 300class, PLAIN

Then no library & no check function 400 CLASS & CLOSURE YEP

07 ->> typeVerify   [ string,birth,color]  500

08 --> emptyVerify   [name   ,birthDate,     color, ]
                      EM-ER  EM-ER date       EM-OK





lucky_numbers=[4,7,99]
person = { first:string, middle:'EM_OK', last:string}







conform as a word


type_czech.typeVerify(the_args, correct_shape)

typeVerify(actual_arguments, expected_shape)
 typeExtras(actual_arguments, expected_shape)
 typeOneOf(actual_arguments, possible_shapes)
 typeOneOfExtras(actual_arguments, possible_shapes)



specification  check=verify

However it has always been a guiding principle of Clojure, widely valued and practiced by the community, to simply represent information as data. 

properties of the data,

specifying structures





//   suggested   surmised  accepted   known

free errors 



 
		   
    
		 error_60












  type_czech._doOneOfShape("TYPE-VERIFY", [  {"X":"an-str","Y":1234},   [{"X":"s","Y":"s"},{"X":"s","Y":"d"}]  ]);     so can tell it ends









      type_czech.typeVerify([[['a']]], [["n"]]);
    "SC@03 - '2' is supposed to be a 'n', but is missing : [1,2]"



type_czech.typeVerify([[['a']]], [["n"]]);
0: "typeVerify(arguments, shape)"
1: "SC@44 - INDEX '0' is assumed to be a 'number', but is mistakenly a 'array' : ['a']"
2: Array [ (1) […] ]
0: Array [ "n" ]
​​








also have the web pages addresses in the sample so 


sp-d-1-exact-shape.html  ==>  02-exact-shape.html

in title, so can get back 






























!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

have lax shape and lax emtpies together later

UNDEF-OK


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


have arrays and objects pages too

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

maybe a page on OPTIONS   THROW-EXCEPTIONS   UNDEF-OK   type_czech.TYPE_CZECH_EVENTS





  // have some argCheck tries right here
  // /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  function ArgumentCheck(arg_check_events = {}) {


SC@32     no error !!!



//              CreateCar('Toyota', ['Lexus', 'RX'],      2000,     "green",  {CYL:8,           FUEL:"gasoline"},  666,      new Date(2011, 11, 25) );
const car_create_shape_gas = ["string", ["string", "string"], "number", "string", {[CYL]:"number", [FUEL]:"string"},   "number", "date" ];

//              CreateCar('Tesla',  ['', 'S 60'],         1990,     "blue",   [85, 7616, 375],                     555, new Date());
const car_create_shape_ele = ["s",      ["s", "s"],           "n",      "s",      ["n"],                               "n", "d"];


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

have lax shape and lax emtpies together later

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

maybe have flash way later, hide the extra stuff till the end

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

like 	UNDEF-OK        hide till end in simple manner











idea  VIN ties to payments - lease, rent, monthly

    lease payments, bank payments ??? in the phone notes pages
    and payor in functional manner
    rent to own




should ....


in shape errors, we are on sc@15

	function emptyOneOf(/*arguments*/){ 


	we are just showing how to get errors on command line, NOT making the tests...








elect => volts



ICE == internal fuel engine

//////////////////////////////////////////////////////////////////
checkArgs_t0
	
	var CreateCar = arg_check_e.checkArgs(CreateCar, CREATECAR);  
	
	function CreateCar(manufacturer, model, the_year){
		return {manufacturer, model, the_year};
	}

	function CREATECAR(manufacturer, model, the_year){
		if (manufacturer.length==0) throw 'Manufacturer must not be emtpy';
		if (model.length==0) throw 'Model must not be emtpy';
		if (year<1886) throw 'Car cannot be made before 1885';
		if (year>2022) throw 'Car cannot be made in the future';
	}


	good_car = CreateCar('Toyota', 'Tercel', 1999);

	try{
		no_model = CreateCar('', 'Tercel', 1999);
	} catch (e){
		e == 'Manufacturer must not be emtpy'
	}

	try{
		no_model = CreateCar('Toyota', 'Tercel', 1234);
	} catch (e){
		e == 'Manufacturer must not be emtpy'
	}


//////////////////////////////////////////////////////////////////////

scalar_shape_t1 d:'date', s:'symbol', f:'function', n:'number', s:'string', b:'boolean'


scalar_empty_t2 d:'date', s:'symbol', f:'function', n:'number', s:'string', b:'boolean'

container_shape_t3  []
container_empty_t4  {}













2   string not empty








 OIL, 






truck ==> lorry
transport






have costs an arrival date, so we can sort, sum and count


mpgs for limit, 



limit ==> range ....





inside the vehicle have one copy of _CreateVehicle() in a closure,


thus created once

right now there will be 3 copies, one for each


if we have a closure then only one

vehicles= {
	




  const base_vehicle = _CreateVehicle();
  createCar(){}


  return {base_vehicle, createBike, createCar}

// fuels are one copy also ....

}

                one global copy
const b_lexus = base_vehicle.vehicleCopy(a_lexus);











base_vehicle.doCopy(a_lexus)



a_lexus.vehicleCopy(a_lexus);















_vehicleAddCopy(a_vehicle){
	
  	function copyObject(){
		const duplicate_vehicle = Object.assign({}, a_vehicle); 
		var {make, engine, body, limit} = car_to_copy;
		make   = Object.assign({}, make);
		engine = Object.assign({}, engine);
		body   = Object.assign({}, body);
		limit  = Object.assign({}, limit);
		const no_copy_vehicle =  Object.assign({}, make, engine, body, limit);
		var new_with_copy = vehicleAddCopy(no_copy_vehicle);  // add copy on copy
		return new_with_copy;
  	}
  
  	a_vehicle.vehicleCopy = copyObject();
  	return a_vehicle;
}




////////////////////////   vehicleAddCopy is in vehicle_functions, no reference though
createCar() ...
var created_car = Object.assign({}, car_properties, vehicle_functions, car_functions, {base_vehicle}); 

var vehicle_with_copy = vehicleAddCopy(created_car);  // add copy on New Created object
return vehicle_with_copy;

b_car=a_car.vehicleCopy();





















have a vehicleCopy which has no relation to car,
so    a_car.copy(); 
will call




//////
createCAr
copyCar









say, typeOneOf ....... > SAY 'exaxct' in the error mess


		consoleTrace('+++ typeOneOf', arguments);   we need to json.stringify()!!!


the exceptions are not correct time, but changeable !!!
	  			console.log('1111111111111111', argumentsList, thisArg);
	  			console.log('22222222222222222',  JSON.stringify(argumentsList) );
	  			console.log('22222222222222222',  JSON.stringify(thisArg) );






car-phone.


couldn't figure it out.
Had typeExtras() but thought I had oneOftypeExtras()
we need to have more better error messages, like the second arg
of 










CommercailTruck 6or more wheels
motor bike 

car/truck/motorcylce










kill for?











what about post return values














we need parameter info on all the functions in ArgumentCheck.js !!!













dogfood miscFuncs


samples/devel_prod_on_off
a--g



	var vehicle_f = arg_check_f.checkArgs(vehicle_f, doShapeTestOnly('f':int));


dog food it??, maybe just the shapes...


all cars , [] +{}



noValueChanges(before_value, check_object, 'www 888');
must check that program does not change variables !!!!!!!!! objects that is




counts...



- test multiple levels of functions/ fat arrows


//////////////////////////////// 

first show all the bells and whistles

then only shape


then paramenter=='do-no-checking'



tnen no function check


then no library



this way can see all the way down


////////////////////////////////

eithers





